import type { AnimatedKeyboardOptions, SensorConfig, SensorType, SharedValue, Value3D, ValueRotation } from './commonTypes';
import type { LayoutAnimationFunction, LayoutAnimationType } from './layoutReanimation';
import type { ProgressAnimationCallback, SharedTransitionAnimationsFunction } from './layoutReanimation/animationBuilder/commonTypes';
import { SensorContainer } from './SensorContainer';
export { startMapper, stopMapper } from './mappers';
export { runOnJS, runOnUI } from './threads';
export { makeShareable } from './shareables';
export { makeMutable, makeRemote } from './mutables';
export type ReanimatedConsole = Pick<Console, 'debug' | 'log' | 'warn' | 'info' | 'error'>;
export declare function getViewProp<T>(viewTag: string, propName: string): Promise<T>;
export declare function getSensorContainer(): SensorContainer;
export declare function registerEventHandler<T>(eventHash: string, eventHandler: (event: T) => void): number;
export declare function unregisterEventHandler(id: number): void;
export declare function subscribeForKeyboardEvents(eventHandler: (state: number, height: number) => void, options: AnimatedKeyboardOptions): number;
export declare function unsubscribeFromKeyboardEvents(listenerId: number): void;
export declare function registerSensor(sensorType: SensorType, config: SensorConfig, eventHandler: (data: Value3D | ValueRotation, orientationDegrees: number) => void): number;
export declare function initializeSensor(sensorType: SensorType, config: SensorConfig): SharedValue<Value3D | ValueRotation>;
export declare function unregisterSensor(sensorId: number): void;
export declare function enableLayoutAnimations(flag: boolean, isCallByUser?: boolean): void;
export declare function configureLayoutAnimations(viewTag: number, type: LayoutAnimationType, config: LayoutAnimationFunction | Keyframe | SharedTransitionAnimationsFunction | ProgressAnimationCallback, sharedTransitionTag?: string): void;
export declare function configureProps(uiProps: string[], nativeProps: string[]): void;
